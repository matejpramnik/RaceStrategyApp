// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RaceStrategyApp.Models;

#nullable disable

namespace RaceStrategyApp.Migrations
{
    [DbContext(typeof(RaceStrategyContext))]
    [Migration("20250716180027_DeeperStructure")]
    partial class DeeperStructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("RaceStrategyApp.Models.PitStop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentTyre")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastRefuelLap")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MandatoryStops")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfStops")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Refueling")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("SelectedTyres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PitStops");
                });

            modelBuilder.Entity("RaceStrategyApp.Models.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AmountOfOpponents")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Damage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LapCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfLaps")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PitStopId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RaceSeriesId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TerminalDamage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrackInfoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PitStopId");

                    b.HasIndex("RaceSeriesId");

                    b.HasIndex("TrackInfoId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("RaceStrategyApp.Models.RaceProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RaceSnapshotId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RaceSnapshotId");

                    b.ToTable("RaceProgresses");
                });

            modelBuilder.Entity("RaceStrategyApp.Models.RaceSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ParticipantCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("RaceSeries");
                });

            modelBuilder.Entity("RaceStrategyApp.Models.RaceSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Change")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LapCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("RaceSnapshots");
                });

            modelBuilder.Entity("RaceStrategyApp.Models.TrackInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrackState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrackWeather")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TrackInfo");
                });

            modelBuilder.Entity("RaceStrategyApp.Models.Race", b =>
                {
                    b.HasOne("RaceStrategyApp.Models.PitStop", "PitStop")
                        .WithMany()
                        .HasForeignKey("PitStopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaceStrategyApp.Models.RaceSeries", null)
                        .WithMany("Races")
                        .HasForeignKey("RaceSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaceStrategyApp.Models.TrackInfo", "TrackInfo")
                        .WithMany()
                        .HasForeignKey("TrackInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PitStop");

                    b.Navigation("TrackInfo");
                });

            modelBuilder.Entity("RaceStrategyApp.Models.RaceProgress", b =>
                {
                    b.HasOne("RaceStrategyApp.Models.RaceSnapshot", "RaceSnapshot")
                        .WithMany()
                        .HasForeignKey("RaceSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaceSnapshot");
                });

            modelBuilder.Entity("RaceStrategyApp.Models.RaceSeries", b =>
                {
                    b.Navigation("Races");
                });
#pragma warning restore 612, 618
        }
    }
}
